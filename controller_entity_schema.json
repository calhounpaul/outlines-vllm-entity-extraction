{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "title": "Extracted Data from a C# Controller File",
  "type": "object",
  "definitions": {
    "parameter": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "description": "The name of the parameter.",
          "regex": "^[a-zA-Z0-9_]*$"
        },
        "type": {
          "type": "string",
          "enum": ["int", "string", "bool", "decimal", "date", "time", "datetime", "other"],
          "description": "The data type or kind of the parameter."
        },
        "description": {
          "type": "string",
          "description": "A brief description of the parameter.",
          "regex": "^[a-zA-Z0-9][\\s\\S]*\\.$",
          "maxLength": 100,
          "minLength": 10
        },
        "isOptional": {
          "type": "boolean",
          "description": "Indicates whether the parameter is optional or not."
        },
        "apiLocation": {
          "type": "string",
          "enum": ["path", "query", "header", "body", "other"],
          "description": "The location of the parameter in the API request."
        }
      },
      "required": ["name", "type"]
    },
    "entity": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "description": "The name of the entity.",
          "regex": "^[a-zA-Z0-9_]*$"
        },
        "type": {
          "type": "string",
          "enum": ["class", "interface", "enum", "struct", "delegate", "other"],
          "description": "The category or kind of the entity."
        },
        "description": {
          "type": "string",
          "description": "A brief description of the entity.",
          "regex": "^[a-zA-Z0-9][\\s\\S]*\\.$",
          "maxLength": 100,
          "minLength": 10
        }
      },
      "required": ["name", "type"]
    },
    "method": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "description": "The name of the method as it appears in the code, without parentheses or other symbols denoting parameters or other information about the method.",
          "regex": "^[a-zA-Z0-9_]*$"
        },
        "type": {
          "type": "string",
          "enum": ["method", "constructor", "destructor", "other"],
          "description": "The type of the method."
        },
        "description": {
          "type": "string",
          "description": "A brief description of the method.",
          "regex": "^[a-zA-Z0-9][\\s\\S]*\\.$",
          "maxLength": 100,
          "minLength": 10
        },
        "httpMethod": {
          "type": "string",
          "enum": ["GET", "POST", "PUT", "DELETE", "OTHER"],
          "description": "The HTTP method used by the action."
        },
        "route": {
          "type": "string",
          "description": "The route associated with the method. It should start with a forward slash (/) and may contain path parameters in curly braces ({}).",
          "regex": "^/([a-zA-Z0-9_.-]+|{[a-zA-Z0-9_.-]+})*(?!.*['\"]).*$",
          "minLength": 1
        },        
        "parameters": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/parameter"
          },
          "description": "The parameters of the method. This array may be empty, or not present.",
          "minItems": 0
        }
      },
      "required": ["name", "type", "httpMethod", "route"]
    },
    "propertyDeclaration": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "description": "The name of the property.",
          "regex": "^[a-zA-Z0-9_]*$"
        },
        "type": {
          "type": "string",
          "enum": ["int", "string", "bool", "decimal", "date", "time", "datetime", "other"],
          "description": "The data type or kind of the property.",
          "regex": "^[a-zA-Z0-9_]*$"
        },
        "description": {
          "type": "string",
          "description": "A brief description of the property.",
          "regex": "^[a-zA-Z0-9][\\s\\S]*\\.$",
          "maxLength": 100,
          "minLength": 10
        },
        "accessibility": {
          "type": "string",
          "enum": ["Public", "Private", "Protected", "Internal", "Other"],
          "description": "The accessibility of the property."
        },
        "isStatic": {
          "type": "boolean",
          "description": "Indicates whether the property is static or not."
        },
        "isReadOnly": {
          "type": "boolean",
          "description": "Indicates whether the property is read-only or not."
        }
      },
      "required": ["name", "type", "accessibility"]
    }
  },
  "properties": {
    "entityDeclarations": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/entity"
      },
      "description": "Declarations of entities (classes, interfaces, etc.) extracted from the code."
    },
    "methodDeclarations": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/method"
      },
      "description": "Declarations of methods (functions, procedures, etc.) extracted from the code."
    },
    "propertyDeclarations": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/propertyDeclaration"
      },
      "description": "Declarations of properties (variables, constants, etc.) extracted from the code."
    }
  },
  "required": ["entityDeclarations", "methodDeclarations", "propertyDeclarations"]
}
